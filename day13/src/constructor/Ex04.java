package constructor;

class Pos{
	int x;
	int y;
	
	// 생성자 오버로딩, 같은 이름의 여러 생성자를 작성할 수 있다
	// 이때 구분하는 기준은 매개변수의 자료형 개수이다
	// 생성자를 만들때는 클래스의 이름을 따서 만드는데
	// 이때 이름은 같지만 매개변수 자리에 각 다르게 필드를 넣어
	// 다른 클래스에서 상황에 따라 사용할 수 있도록 하는 것이다
	// 각 매개변수는 다르지만 이름이 같다하여 생성자 오버로딩이라고 한다
	
	Pos(int x, int y) {
		this(); // 기본 생성자를 다른 생성자에 넣은 상태
		// 위 경우처럼 기본 생성자를 매개변수가 있는 또 다른 생성자에 사용할때는 
		// 맨 위에 위치하도록 한다
		// 이유는 다른 생성자를 호출하게 되면 그 호출된(기본생성자)에가서
		// 호출을 하고 다시 생성자로 와서 밑에 this.x,y의 공간을 만들게 되는데
		// 생성자 안에 생성자를 호출하는 위와 같은경우에 밑에 있게 된다면
		// this.x.y로 공간을 만들었지만 this()로 인해 다른 생성자로 갔다가 오게 된다
		// 이때 이전에 this. x,y로 만들었던 생성자 공간은 this()인 기본생성자로
		// 공간이 다시 만들어지기 떄문에 값이 있는 생성자라면 기본생성자를 먼저 호출하여
		// 출력하고 공간을 만들어 놓는것이 효율성으로도 좋다
		
		this.x = x;
		this.y = y;
	}

	public Pos() {
		System.out.println("Pos 객체 생성");
		
	}
	
	
}

public class Ex04 {
	public static void main(String[] args) {
		// 자바에서는 몇몇 특수상황을 제외하면 생성자를 호출해야만 객체를 생성할 수 있다
		
		// 참조변수는 있으나 변수가 가리키는 대상을 지정하지 않았다
		// 그러므로 name에 대입은 불가하다
		// Member m1;
		// m1.name = "이지은";
		
		// 제한자가 없다는 가정하에 생성한 객체를 참조변수가 참조한다
		// 그러므로 대입이 가능하다
		// Member m1 = new Member();
		// m1.name = "이지은";
		
		// 클래스는 같지만 객체가 다르기 때문에 값이 2번 출력된다
		// 기본생성자는 1번 출력되고 값은 2번 출력된다
		
		// 접근제한자가 없다면 밑 2가지 방법 모두 가증하다
		// 따로 대입하는 생성자가 있기 때문에  따로 대입하는 것도 되고
		Pos ob1 = new Pos();
		ob1.x = 2;
		ob1.y = 5;
		System.out.printf("[%d][%d]\n", ob1.x, ob1.y);
		
		// 한번에 대입하는 것도 된다
		Pos ob2 = new Pos(3,4);
		System.out.printf("[%d][%d]\n", ob2.x, ob2.y);
	
	}
}
