package wrapperClass;

import java.util.*;

public class Ex01 {
	public static void main(String[] args) {
		
		
		//primitive type
		// boolean, byte, char, short, int, long, float, double
		
		// Wrapper Class : 원시 자료형의 값을 객체 형태로 저장하기 위해 사용하는 클래스
		// Boolean, Byte, Character, Short, Integer, Long, Float, Double
		
		byte by1 = 10;	// 비 객체형 (옛날객체스타일 - c언어)
		Byte by2 = 20;
		
		System.out.println("by1 : " + by1);
		System.out.println("By2 : " + by2);
		// 기본 자료형 /Wrapper Class 모두 값을 저장하는데 이용할 수 있다
		// Wrapper Class는 값에 대한[기능], 지료형의 대한 [기능]이 내장되어 있다
		// 이클립스를 사용하는 이유는 여러 함수나, 자료형을 자동완성 해주기 때문에 메모장이 아닌 이클립스를 사용한다
//		by2.
		
		// 자바의 객체 지향 언어 특성을 제대로 활용하기 위해서 사용해야 할 경우가 있다
		
		
		// 1) 기초를 다질때 > 여러 정수가 포함된 배열에서 짝수만 골라내서 새로 담아서 출력하기
		int[] arr = {7, 5, 4, 2, 8, 1, 9, 5};
		int[] arr2 = new int[3];
		
		int index = 0;
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] % 2 == 0) {
				arr2[index++] = arr[i];
			}
		}
		System.out.println("arr2 : " + Arrays.toString(arr2));
		System.out.println();
		
		// 2) 익숙해졌을때 > 객체 지향 특성을 활용하여 간단하게 처리하기
		// Syntax error, insert "Dimensions" to complete ReferenceType
		
		Integer[] arr3 = {7, 5, 4, 2, 8, 1, 9, 5};
		ArrayList<Integer> list = new ArrayList<>(Arrays.asList(arr3));
		
		System.out.println("list : " + list);
		
		list.removeIf(num -> num % 2 != 0); // 만약 홀수이면 리스트에서 제거한다
		
		System.out.println("list : " + list);
		
		
		
		
		
		
		
		
	}
}
